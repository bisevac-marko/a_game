ProfileEntry :: struct
{
    name: *char,
    elapsed_sec: f64,
    
    next: *ProfileEntry,
}

SubMenu :: struct
{
    is_active: b32,
}

@Print
UiWindow :: struct
{
    position: vec2,
    size: vec2,
    layer: u32,
    
    id: *char,
    
    @NoPrint
        next: *UiWindow,
}

WindowSerializeData :: struct
{
    name_size: u32,
    name: [64]char,
    position: vec2,
    size: vec2,
}

UiFileHeader :: struct
{
    window_count: u32,
}

StackedWindow :: struct
{
    window: *UiWindow,
    previous_draw_cursor: vec2,
}

Colorpicker :: struct
{
    color: Color,
    
    hue: f32,
    saturation: f32,
    brightness: f32,
    is_active: b32,
    
    key: *void,
    next: *Colorpicker,
}

DevUI :: struct
{
    arena: MemoryArena,
    temp_arena: MemoryArena,
    temp_memory: TemporaryArena,
    
    render_group: *RenderGroup,
    input: GameInput,
    font: Font,
    
    hot_item: *void,
    next_hot_item: *void,
    active_item: *void,
    
    colorpickers: [64]Colorpicker,
    
    text_input_buffer: [256]char,
    text_insert_index: u32,
    
    editbox_value_to_set_size: u8,
    editbox_value_is_int: b32,
    editbox_value_to_set: *void,
    
    mouse_pos: vec2,
    prev_mouse_pos: vec2,
    
    window_table: [64]*UiWindow,
    current_window: *UiWindow, 
    focused_window: *UiWindow,
    
    window_stack: [32]StackedWindow,
    num_stacked_windows: u32,
    
    draw_cursor: vec2,
    top_layer: u32,
    is_newline: b32,
    
    sub_menus: [64]SubMenu,
    sub_menu_index: u32,
    
    screen_height: i32,
    screen_width: i32,
}
