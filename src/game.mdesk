@struct GameMemory:
{
    is_initialized: b8,

    permanent_storage: *void,
    permanent_storage_size: sizet,

    temporary_storage: *void,
    temporary_storage_size: sizet,

    debug: *DebugState,
    platform: Platform,

    screen_width: i32,
    screen_height: i32,
}


@struct GameSoundBuffer:
{
    samples_per_sec: i32,
    sample_count: i32,
    samples: *i16,
}



@struct Render:
{
    sprite: SpriteHandle,
    size: vec2,
    color: Color,
}

@enum EntityFlag:
{
    ENTITY_FLAG_ENABLED,
}

@struct Rigidbody:
{
    velocity: vec2,
    acceleration: vec2,

    mass: f32,
}

@struct Entity:
{
    flags: u32,

    render: Render,

    position: vec2,
    rigidbody: Rigidbody,
}


@struct Particle:
{
    position: vec2,
    rigidbody: Rigidbody,
}

@struct ParticleEmitter:
{
    min_vel: vec2,
    max_vel: vec2,

    position: vec2,

    drag: f32,

    particle_spawn_rate: u32,
    render: Render,

    particles: *Particle,
    particle_index: u32,
    max_particles :u32,
}

@enum ComponentType:
{
    COMPONENT_Transform,
    COMPONENT_Render,
}

@struct GameState:
{
    arena: MemoryArena,
    transient_arena: MemoryArena,


    assets: Assets,

    t_sine: f32,
    tone_hz: i32,
    tone_volume: i32,

    hero_sprite: SubSprite,
    minotaur_sprite: SpriteHandle,
    hero_sprite_sheet: SpriteHandle,
    backgroud_sprite: SpriteHandle,

    tile_map: ([19][10]u32),
    tile_size: u32,

    is_free_camera: b8,

    particle_emitter: ParticleEmitter,

    player_entity_index: u32,
    entities: ([1024]Entity),
    num_entities: u32,

    render_setup: RenderSetup,
    renderer: Renderer,
}

