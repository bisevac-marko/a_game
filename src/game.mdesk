@struct GameMemory:
{
    is_initialized: b8,

    permanent_storage: *void,
    permanent_storage_size: sizet,

    temporary_storage: *void,
    temporary_storage_size: sizet,

    debug: *DebugState,
    platform: Platform,

    screen_width: i32,
    screen_height: i32,
}


@struct GameSoundBuffer:
{
    samples_per_sec: i32,
    sample_count: i32,
    samples: *i16,
}



@struct Render:
{
    sprite: SpriteHandle,
    size: vec2,
    color: Color,
}

@struct Transform:
{
    position: vec2,
    scale: vec2,
    rotation: vec2,
}

@struct Rigidbody:
{
    velocity: vec2,
    acceleration: vec2,

    mass: f32,
}

@struct Particle:
{
    position: vec2,
    rigidbody: Rigidbody,
}


@struct ParticleEmitter:
{
    min_vel: vec2,
    max_vel: vec2,

    drag: f32,

    render: Render,

    particle_spawn_rate: u32,

    position: vec2,

    particles: *Particle,
    particle_index: u32,
    max_particles :u32,
}

@define ("COMPONENT_Render 1<<0")
@define ("COMPONENT_Rigidbody 1<<1")
@define ("COMPONENT_Transform 1<<2")
@define ("COMPONENT_ParticleEmitter 1<<3")
@define ("ENTITY_MAX 10000")

@typedef ("u32 EntityId;")


@struct WorldState:
{
    renders: ([ENTITY_MAX]Render),
    rigidbodys: ([ENTITY_MAX]Rigidbody),
    transforms: ([ENTITY_MAX]Transform),
    entity_masks: ([ENTITY_MAX]u32),
    particle_emitters: ([ENTITY_MAX]ParticleEmitter),

    num_entities: u32,
}




@struct GameState:
{
    arena: MemoryArena,
    transient_arena: MemoryArena,


    assets: Assets,

    t_sine: f32,
    tone_hz: i32,
    tone_volume: i32,

    hero_sprite: SubSprite,
    minotaur_sprite: SpriteHandle,
    hero_sprite_sheet: SpriteHandle,
    backgroud_sprite: SpriteHandle,

    tile_map: ([19][10]u32),
    tile_size: u32,

    is_free_camera: b8,

    particle_emitter: EntityId,

    world: *WorldState,

    render_setup: RenderSetup,
    renderer: Renderer,
}

