@struct GameMemory:
{
    is_initialized: b8,
    
    permanent_storage: *void,
    permanent_storage_size: sizet,
    
    temporary_storage: *void,
    temporary_storage_size: sizet,
    
    debug: *DebugState,
    platform: Platform,
    
    screen_width: i32,
    screen_height: i32,
}


@struct GameSoundBuffer:
{
    samples_per_sec: i32,
    sample_count: i32,
    samples: *i16,
}



@struct Render:
{
    sprite: SpriteHandle,
    size: vec2,
    color: Color,
    layer: f32,
}

@struct Transform:
{
    position: vec2,
    scale: vec2,
    rotation: vec2,
}

@struct Rigidbody:
{
    velocity: vec2,
    acceleration: vec2,
    
    mass: f32,
}

@struct Particle:
{
    position: vec2,
    rigidbody: Rigidbody,
}


@struct ParticleEmitter:
{
    min_vel: vec2,
    max_vel: vec2,
    
    drag: f32,
    
    render: Render,
    
    particle_spawn_rate: u32,
    
    position: vec2,
    
    particles: *Particle,
    particle_index: u32,
    max_particles :u32,
}

@define ("ENTITY_MAX 10000")
@define ("NUM_COMPONENTS 3")

@typedef ("u64 EntityId")

@struct ComponentInfo:
{
    size: u32,
    name: *char,
}

@struct Component:
{
    data: *void,
}

@struct WorldState:
{
    components: ([NUM_COMPONENTS]Component),
    component_infos: ([NUM_COMPONENTS]ComponentInfo),
    query_components_map: HashMap,
    entity_masks: ([ENTITY_MAX]u64),
    
    entity_count: u32,
    component_count: u32,
    removed_ids: *Array,
}

@struct GameState:
{
    arena: MemoryArena,
    flush_arena: MemoryArena,
    
    
    assets: Assets,
    
    t_sine: f32,
    tone_hz: i32,
    tone_volume: i32,
    
    hero_sprite: SpriteHandle,
    minotaur_sprite: SpriteHandle,
    hero_sprite_sheet: SpriteHandle,
    backgroud_sprite: SpriteHandle,
    goblin_sprite_sheet: SpriteHandle,
    goblin_sprite: SpriteHandle,
    
    tile_map: ([19][10]u32),
    tile_size: u32,
    
    is_free_camera: b8,
    
    particle_emitter: EntityId,
    
    world: WorldState,
    
    renderer: Renderer,
}

@typedef ("void (*GameMainLoopProc)(f32 delta_time, GameMemory* memory, GameSoundBuffer* game_sound, GameInput* input);")
