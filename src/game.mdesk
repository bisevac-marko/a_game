GameMemory :: struct
{
    permanent_storage: *void,
    permanent_storage_size: sizet,
    
    temporary_storage: *void,
    temporary_storage_size: sizet,
    
    debug_storage: *void,
    debug_storage_size: sizet,
    
    debug: *DebugState,
    
    platform: Platform,
    
    screen_width: i32,
    screen_height: i32,
}


GameSoundBuffer :: struct
{
    samples_per_sec: i32,
    sample_count: i32,
    samples: *i16,
}

@Print
Render :: struct
{
@NoPrint
    sprite: SpriteID,
    color: Color,
    layer: f32,
}

@Print
Transform :: struct
{
    position: vec2,
    scale: vec2,
    rotation: vec2,
}

@Print
Rigidbody :: struct
{
    velocity: vec2,
    acceleration: vec2,
    
    mass: f32,
}


@Print
Particle :: struct
{
    position: vec2,
    velocity: vec2,
    acceleration: vec2,
    size: vec2,
}


ParticleEmitter :: struct
{
    min_vel: vec2,
    max_vel: vec2,
    
    drag: f32,
    
    color: Color,
    size: vec2,
    
    particle_spawn_rate: u32,
    
    position: vec2,
    
    particles: *Particle,
    particle_index: u32,
    max_particles :u32,
}

Entity :: struct
{
    position: vec3,
    rotation: vec3,
    scale: vec3,

    spriteID: SpriteID,
    meshID: MeshEnum,
    color: Color,
    layer: Layer,

    velocity: vec2,
    acceleration: vec2,
    mass: f32,

    flags: u32,
}

EntityFlag :: flags
{
    RENDER,
    PHYSICS,
}

ENTITY_MAX :: 16384

WorldState :: struct
{
    grid_width: u16,
    grid_height: u16,
    
    render_group: *RenderGroup,

    entities: [ENTITY_MAX]Entity;
    entity_count: u32,
}


GameState :: struct
{
    arena: MemoryArena,
    flush_arena: MemoryArena,
    
    delta_time: f32,
    
    assets: Assets,
    
    font: Font,
    t_sine: f32,
    tone_hz: i32,
    tone_volume: i32,
    
    tile_size: u32,
    
    is_free_camera: b8,
    
    world: WorldState,
    
    renderer: Renderer2D,
    render_group: *RenderGroup,

}
