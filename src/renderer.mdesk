@struct @printable Color:
{
    r: u8, 
    g: u8, 
    b: u8, 
    a: u8, 
}



@struct @printable VertexData:
{
    position: vec3,
    uv: vec2,
    color: Color,
    texture_slot: f32,
}


@struct Camera:
{
    position: vec3,
    direction: vec3,
    up: vec3,
}

@typedef ("i32 SpriteHandle;")
@struct Sprite:
{
    name: *char,
    data: *void,
    width: i32,
    height: i32,
    channels: i32,
    id: u32,
    slot: u32,

    loaded_to_gpu: b8,
}

@struct SubSprite:
{
    sprite_sheet: SpriteHandle,
    uvs: ([4]vec2),
}

@struct CharMetric:
{
   x0: u16,
   y0: u16,
   x1: u16,
   y1: u16,
   xoff: f32,
   yoff: f32,
   xadvance: f32,
}

@struct Font:
{
    char_subsprites: *SubSprite,
    char_metrics: *CharMetric,
    num_chars: u16,
    font_size: u32,
    font_sprite_handle: SpriteHandle,
}



@enum RenderEntryType:
{
    RENDER_ENTRY_QuadEntry,
    RENDER_ENTRY_TriangleEntry,
}

@struct RenderEntryHeader:
{
    entry_type: RenderEntryType,
}

@enum ShaderId:
{
    SHADER_ID_NORMAL,
    SHADER_ID_COLORPICKER,
    SHADER_ID_TEST,
    NUM_SHADERS,
}

@struct QuadEntry:
{
    position: vec3,
    size: vec2,
    color: Color,
    sprite_handle: SpriteHandle,
    subsprite: *SubSprite,
    
    shader_id: ShaderId,
}

@struct TriangleEntry:
{
    points: ([3]vec3),
    color: Color,
    sprite_handle: SpriteHandle,
    subsprite: *SubSprite,
    
    shader_id: ShaderId,
}

@struct SortElement:
{
    entry_offset: u32,
    key: u32,
}

@struct RenderSetup:
{
    projection: mat4,

    sprite_handles: ([32]SpriteHandle),
    num_sprites: u32,
}

@enum UniformType:
{
    UNIFORM_F32,
    UNIFORM_F64,
    UNIFORM_I32,
    UNIFORM_U32,
    UNIFORM_VEC2,
    UNIFORM_VEC3,
    UNIFORM_VEC4,
    UNIFORM_MAT4,
    UNIFORM_TEXTURE2D,
}

@struct UniformTypeInfo:
{
    type: UniformType,
    size: u32,
}

@struct Uniform:
{
    type_info: UniformTypeInfo,
    data: *void,
    name: *char,

    next: *Uniform;
}


@struct Shader:
{
    bind_id: u32,
    uniforms: *Uniform,
    num_uniforms: i32,
}

@struct Assets:
{
    arena: MemoryArena,

    sprites: ([64]Sprite),
    shaders: ([NUM_SHADERS]Shader),
    num_sprites: u32,
}


@struct RenderGroup:
{
    setup: RenderSetup,
    assets: *Assets,

    push_buffer_base: *u8,
    push_buffer_size: u32,
    push_buffer_capacity: u32,

    sort_element_count: u32,

    next: *RenderGroup,
}

@define ("MAX_VERTICES 100000")
@define ("MAX_INDICES 150000")


@struct Renderer:
{
    vertices: ([MAX_VERTICES]VertexData),
    vertex_count: u32,
    indices: ([MAX_INDICES]u32),
    indices_count: u32,

    VBO: u32,
    EBO: u32,
    VAO: u32,

    camera: Camera,

    slot: u32,

    light_pos: vec3,

    screen_width: i32,
    screen_height: i32,

    assets: *Assets,

    render_groups: *RenderGroup,

    white_sprite: SpriteHandle,
}


@typedef ("void RendererProc(Renderer* ren);")
